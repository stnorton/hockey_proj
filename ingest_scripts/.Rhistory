#create stan data
stan_data <- list(
J = length(unique(goalie_df_comp$goalie_id_stan)), # num goalies
N = nrow(model_df), # num shots
B = ncol(model_df), # num predictors
S = model_df, # model matrix
jj = as.numeric(goalie_df_comp$goalie_id_stan), # goalie id
y = as.numeric(goalie_df_comp$goal)
)
?stan
#fit model
fit <- stan(file = 'goalie_irt.stan', data = stan_data, chains = 2, iter = 2000)
setwd("~/Projects/hockey_proj/ingest_scripts")
#fit model
fit <- stan(file = 'goalie_irt.stan', data = stan_data, chains = 2, iter = 2000)
library(hockeyR)
library(sportyR)
library(ggplot2)
library(tidyverse)
library(lubridate)
##GET DATA----------------------------------------------------------
all_df <- load_pbp('2023-24') #load 23-24 season
#now cuts off at 12/29 - will scrape all days since then
update_vector <- seq(as.Date("2023-12-30"), Sys.Date() - 1, by = "days")
test <- lapply(update_vector, scrape_day) #scrape all days since last update
which(update_vector == '2024-02-02')
update_vector[35] <- NULL
update_vector
try_scrape_day <- try(scrape_day)
test <- lapply(update_vector, scrape_day) #scrape all days since last update
try_scrape_day <- function(day =){
try_scrape_day <- function(day){
tryCatch(
scrape_day(day),
error = function(e) NULL
)
}
test <- lapply(update_vector, try_scrape_day) #scrape all days since last update
updated_df <- do.call(rbind.data.frame, test) #bind all days together
#bind together
all_df <- rbind(all_df, updated_df)
##CLEAN DATA-------------------------------------------------------
#API changed how it returns player names, fixing so that it is consistent
convert_names <- function(name) {
# Use gsub to replace the space with a dot
result <- gsub(" ", ".", name)
return(result)
}
name_cols <- c('event_player_1_name', 'event_player_2_name', 'event_player_3_name')
for(i in 1:length(name_cols)){
all_df[, name_cols[i]] <- sapply(all_df[, name_cols[i]], convert_names)
}
names_check_df <- bind_rows(
all_df %>%
select(event_player_1_name, event_player_1_id) %>%
rename(event_name = event_player_1_name, event_id = event_player_1_id),
all_df %>%
select(event_player_2_name, event_player_2_id) %>%
rename(event_name = event_player_2_name, event_id = event_player_2_id),
all_df %>%
select(event_player_3_name, event_player_3_id) %>%
rename(event_name = event_player_3_name, event_id = event_player_3_id)
)
names_unique_key <- names_check_df %>% #removes any names that are wrong in API data
filter(!grepl("\\s", event_name))
names_unique_key <- distinct(names_unique_key)
colnames(names_unique_key) <- c('fixed_name', 'id')
#fix names for players 1 - 3
all_df <- left_join(all_df, names_unique_key, by = c('event_player_1_id' = 'id'))
all_df$event_player_1_name <- all_df$fixed_name
all_df$fixed_name <- NULL
all_df <- left_join(all_df, names_unique_key, by = c('event_player_2_id' = 'id'))
all_df$event_player_2_name <- all_df$fixed_name
all_df$fixed_name <- NULL
all_df <- left_join(all_df, names_unique_key, by = c('event_player_3_id' = 'id'))
all_df$event_player_3_name <- all_df$fixed_name
all_df$fixed_name <- NULL
#rename wrong aho
wrong_aho <- which(all_df$event_player_1_name == "Sebastian.Aho"  &
all_df$event_team == "New York Islanders" |
all_df$event_player_2_name == "Sebastian.Aho"  &
all_df$event_team == "New York Islanders" |
all_df$event_player_3_name == "Sebastian.Aho"  &
all_df$event_team == "New York Islanders")
all_df[wrong_aho, c('event_player_1_name', 'event_player_2_name', 'event_player_3_name')] <-
'Sebastian.Aho(NYI)'
#calcualte xg
all_df <- calculate_xg(all_df)
write.csv(all_df, file = "../data/all_events24.csv")
write.csv(all_df, file = "../data/all_events24.csv")
setwd("~/Projects/hockey_proj/ingest_scripts")
# all_df <- load_pbp('2023-24') #load 23-24 season
# #now cuts off at 12/29 - will scrape all days since then
# update_vector <- seq(as.Date("2023-12-30"), as.Date('2024-02-01'))
#
# test <- lapply(update_vector, scrape_day) #scrape all days since last update
#
# updated_df <- do.call(rbind.data.frame, test) #bind all days together
#
# #bind together
# all_df <- rbind(all_df, updated_df)
read.csv('../data/all_events_24.csv')
getwd()
# all_df <- load_pbp('2023-24') #load 23-24 season
# #now cuts off at 12/29 - will scrape all days since then
# update_vector <- seq(as.Date("2023-12-30"), as.Date('2024-02-01'))
#
# test <- lapply(update_vector, scrape_day) #scrape all days since last update
#
# updated_df <- do.call(rbind.data.frame, test) #bind all days together
#
# #bind together
# all_df <- rbind(all_df, updated_df)
read.csv('./data/all_events_24.csv')
# all_df <- load_pbp('2023-24') #load 23-24 season
# #now cuts off at 12/29 - will scrape all days since then
# update_vector <- seq(as.Date("2023-12-30"), as.Date('2024-02-01'))
#
# test <- lapply(update_vector, scrape_day) #scrape all days since last update
#
# updated_df <- do.call(rbind.data.frame, test) #bind all days together
#
# #bind together
# all_df <- rbind(all_df, updated_df)
read.csv('../data/all_events24.csv')
# all_df <- load_pbp('2023-24') #load 23-24 season
# #now cuts off at 12/29 - will scrape all days since then
# update_vector <- seq(as.Date("2023-12-30"), as.Date('2024-02-01'))
#
# test <- lapply(update_vector, scrape_day) #scrape all days since last update
#
# updated_df <- do.call(rbind.data.frame, test) #bind all days together
#
# #bind together
# all_df <- rbind(all_df, updated_df)
all_df <- read.csv('../data/all_events24.csv')
colnames(all_df)
rel_rows <- which(all_df$event_type == "GOAL" | all_df$event_type == "SHOT")
goalie_df <- all_df[rel_rows, ]
#subset to only needed columns
goalie_df <- goalie_df[,c('event_type', 'xg',  'secondary_type', 'event_goalie_id')]
#convert to one zone
#goalie_df$x_fixed <- abs(goalie_df$x_fixed)
#create goal indicator
goalie_df$goal <- ifelse(goalie_df$event_type == 'GOAL', 1, 0)
##MODEL---------------------------------------------------------------------------------------
#remove nas
goalie_df_comp <- goalie_df[complete.cases(goalie_df), ]
#scale xg
goalie_df_comp$xg <- scale(goalie_df_comp$xg)
#create model frame
model_df <- model.matrix(~ xg + secondary_type, data = goalie_df_comp)
#get numeric IDs for goalies that make more sense
goalie_df_comp$goalie_id_stan <- as.numeric(as.factor(goalie_df_comp$event_goalie_id))
write.csv(goalie_df, file = 'goalie_df24.csv')
View(goalie_df_comp)
View(goalie_df_comp)
colnames(goalie_df_comp)[2] <- 'xg'
write.csv(goalie_df_comp, file = 'goalie_df.csv')
#LIBRARY------------------------------------------------------------
library(hockeyR)
library(sportyR)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(rstan)
options(mc.cores = 2)
##GET DATA----------------------------------------------------------
# all_df <- load_pbp('2023-24') #load 23-24 season
# #now cuts off at 12/29 - will scrape all days since then
# update_vector <- seq(as.Date("2023-12-30"), as.Date('2024-02-01'))
#
# test <- lapply(update_vector, scrape_day) #scrape all days since last update
#
# updated_df <- do.call(rbind.data.frame, test) #bind all days together
#
# #bind together
# all_df <- rbind(all_df, updated_df)
all_df <- read.csv('../data/all_events24.csv')
#filter to shots and goals
rel_rows <- which(all_df$event_type == "GOAL" | all_df$event_type == "SHOT")
goalie_df <- all_df[rel_rows, ]
#subset to only needed columns
goalie_df <- goalie_df[,c('event_type', 'xg',  'secondary_type', 'event_goalie_id')]
#convert to one zone
#goalie_df$x_fixed <- abs(goalie_df$x_fixed)
#create goal indicator
goalie_df$goal <- ifelse(goalie_df$event_type == 'GOAL', 1, 0)
library(sp)
#create polygon to sample on
xcoords <- c(0, 100, 100, 0, 0)
ycoords <- c(43, 43, -43, -43, 43)
ozone_poly <- Polygon(cbind(xcoords, ycoords))
ozone_poly <- Polygons(list(ozone_poly), ID = "A")
ozone_poly <- SpatialPolygons(list(ozone_poly))
#sample points as seeds for polygon
hex_points <- spsample(ozone_poly, type = "hexagonal", cellsize = 1.5)
hex_grid <- HexPoints2SpatialPolygons(hex_points, dx = 1.5)
plot(hex_grid)
hex_points <- spsample(ozone_poly, type = "hexagonal", cellsize = 4)
hex_grid <- HexPoints2SpatialPolygons(hex_points, dx = 4)
plot(hex_grid)
goalie_pts <- goalie_df[, c('x_fixed', 'y_fixed')]
goalie_df <- all_df[rel_rows, ]
#subset to only needed columns
goalie_df <- goalie_df[,c('event_type', 'xg',  'secondary_type', 'event_goalie_id', 'x_fixed', 'y_fixed')]
#convert to one zone
goalie_df$x_fixed <- abs(goalie_df$x_fixed)
#create goal indicator
goalie_df$goal <- ifelse(goalie_df$event_type == 'GOAL', 1, 0)
goalie_pts <- goalie_df[, c('x_fixed', 'y_fixed')]
goalie_sp <- SpatialPoints(coords = goalie_df[, c('x_fixed', 'y_fixed')])
polygon_id <- over(goalie_sp, hex_grid)
goalie_df$polygon <- polygon_id
sum(which(is.na(goalie_df$polygon)))
View(goalie_df)
length(which(is.na(goalie_df$polygon)))
687/51254
rstan:::rstudio_stanc("goalie_irt.stan")
##MODEL---------------------------------------------------------------------------------------
#remove nas
goalie_df_comp <- goalie_df[complete.cases(goalie_df), ]
#get numeric IDs for goalies that make more sense
goalie_df_comp$goalie_id_stan <- as.numeric(as.factor(goalie_df_comp$event_goalie_id))
stan_data <- list(
J = length(unique(goalie_df_comp$goalie_id_stan)), # num goalies
P = length(unique(goalie_df_comp$polygon)), #number of shot zones
N = nrow(model_df), # num shots
jj = as.numeric(goalie_df_comp$goalie_id_stan), # goalie id
pp = as.numeric(goalie_df_comp$polygon), # shot zone id
y = as.numeric(goalie_df_comp$goal)
)
stan_data <- list(
J = length(unique(goalie_df_comp$goalie_id_stan)), # num goalies
P = length(unique(goalie_df_comp$polygon)), #number of shot zones
N = nrow(goalie_df_comp), # num shots
jj = as.numeric(goalie_df_comp$goalie_id_stan), # goalie id
pp = as.numeric(goalie_df_comp$polygon), # shot zone id
y = as.numeric(goalie_df_comp$goal)
)
#fit model
fit <- stan(file = 'goalie_irt.stan', data = stan_data, chains = 2, iter = 2000)
rstan:::rstudio_stanc("goalie_irt.stan")
rstan:::rstudio_stanc("goalie_irt.stan")
#fit model
fit <- stan(file = 'goalie_irt.stan', data = stan_data, chains = 2, iter = 2000)
summary(goalie_df_comp$polygon)
#get polygon id for stan that works
goalie_df_comp$polygon_stan <- as.numeric(as.factor(goalie_df_comp$polygon))
#create stan data
stan_data <- list(
J = length(unique(goalie_df_comp$goalie_id_stan)), # num goalies
P = length(unique(goalie_df_comp$polygon)), #number of shot zones
N = nrow(goalie_df_comp), # num shots
jj = as.numeric(goalie_df_comp$goalie_id_stan), # goalie id
pp = as.numeric(goalie_df_comp$polygon), # shot zone id
y = as.numeric(goalie_df_comp$goal)
)
#fit model
fit <- stan(file = 'goalie_irt.stan', data = stan_data, chains = 2, iter = 2000)
stan_data <- list(
J = length(unique(goalie_df_comp$goalie_id_stan)), # num goalies
P = length(unique(goalie_df_comp$polygon)), #number of shot zones
N = nrow(goalie_df_comp), # num shots
jj = as.numeric(goalie_df_comp$goalie_id_stan), # goalie id
pp = as.numeric(goalie_df_comp$polygon_stan), # shot zone id
y = as.numeric(goalie_df_comp$goal)
)
#fit model
fit <- stan(file = 'goalie_irt.stan', data = stan_data, chains = 2, iter = 2000)
#fit model
fit <- stan(file = 'goalie_irt.stan', data = stan_data, chains = 2, iter = 5000)
View(fit)
alphas <- extract(fit, 'alpha')
View(alphas)
length(alphas)
length(alphas$alpha)
fit_sum <- summary(fit)
View(fit_sum)
View(fit_sum$summary)
fit_sum <- summary(fit, pars = 'alpha')$summary
fit_sum$stan_goalie_id <- seq(1, nrow(fitsum))
fit_sum$stan_goalie_id <- seq(1, nrow(fit_sum))
View(fit_sum)
fit_sum <- summary(fit, pars = 'alpha')$summary
fit_sum <- as.data.frame(summary(fit, pars = 'alpha')$summary)
fit_sum$stan_goalie_id <- seq(1, nrow(fit_sum))
#merge back to goalie_df
goalie_results_df <- unique(goalie_df_comp$goalie_id_stan, goalie_df_comp$event_goalie_id)
#merge back to goalie_df
goalie_key_df <- goalie_comp_df[,c('event_goalie_id', 'goalie_id_stan')]
#merge back to goalie_df
goalie_key_df <- distinct(goalie_df_comp[,c('event_goalie_id', 'goalie_id_stan')])
View(goalie_key_df)
View(goalie_df_comp)
View(goalie_df)
goalie_df <- all_df[rel_rows, ]
#subset to only needed columns
goalie_df <- goalie_df[,c('event_type', 'xg',  'secondary_type', 'event_goalie_id', 'x_fixed', 'y_fixed', 'event_goalie_name')]
#convert to one zone
goalie_df$x_fixed <- abs(goalie_df$x_fixed)
#create goal indicator
goalie_df$goal <- ifelse(goalie_df$event_type == 'GOAL', 1, 0)
#merge back to goalie_df
goalie_key_df <- distinct(goalie_df[,c('event_goalie_id', 'goalie_id_stan', 'event_goalie_name')])
View(goalie_df)
#merge back to goalie_df
goalie_key_df <- distinct(goalie_df[,c('event_goalie_id', 'event_goalie_name')])
model_key_df <- distinct(goalie_df_comp[,c('event_goalie_id', 'goalie_id_stan')]))
model_key_df <- distinct(goalie_df_comp[,c('event_goalie_id', 'goalie_id_stan')])
goalie_key_df <- left_join(goalie_key_df, model_key_df, by = 'event_goalie_id')
View(goalie_key_df)
#merge in results
goalie_key_df <- left_join(goalie_key_df, fit_sum, by = 'goalie_id_stan')
fit_sum$goalie_id_stan <- seq(1, nrow(fit_sum))
View(fit_sum)
fit_sum$stan_goalie_id <- NULL
#merge in results
goalie_key_df <- left_join(goalie_key_df, fit_sum, by = 'goalie_id_stan')
View(goalie_key_df)
View(goalie_df_comp)
##MODEL---------------------------------------------------------------------------------------
#remove nas
goalie_df_comp <- goalie_df[complete.cases(goalie_df), ]
View(goalie_df_comp)
View(goalie_df)
View(goalie_df_comp)
#get numeric IDs for goalies that make more sense
goalie_df_comp$goalie_id_stan <- as.numeric(as.factor(goalie_df_comp$event_goalie_id))
View(alphas)
class(alphas$alpha)
View(alphas)
test <- t(alphas$alpha)
View(test)
str(alphas$alpha)
#remove NA row
goalie_key_df <- goalie_key_df[complete.cases(goalie_key_df), ]
#plot results
goalie_res_samples <- cbind.data.frame(goalie_key_df$event_goalie_id, t(alphas$alpha)) #merge in samples
View(goalie_res_samples)
#plot results
goalie_res_samples <- cbind.data.frame(goalie_key_df$event_goalie_name, t(alphas$alpha)) #merge in samples
#get alpha samples
alpha_samps <- as.data.frame(extract(fit, pars = 'alpha'))$alpha
#get alpha samples
alpha_samps <- as.data.frame(extract(fit, pars = 'alpha')$alpha)
View(alpha_samps)
#get alpha samples
alpha_samps <- as.data.frame(t(extract(fit, pars = 'alpha')$alpha))
alpha_samps$goalie_id_stan <- seq(1, nrow(alpha_samps))
#merge alpha samps back to key with names
names_only <- cbind(goalie_key_df[,c('event_goalie_name', 'goalie_id_stan')])
alpha_samps <- left_join(alpha_samps, names_only, by = 'goalie_id_stan')
View(alpha_samps)
plot_df <- alpha_samps %>%
pivot_longer(cols = starts_with("V"), names_to = "Sample", values_to = "Value")
View(plot_df)
ggplot(plot_df, aes(x = Value, y = Names, fill = ..x..), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Ridge Plot of Samples by Name")
library(ggplot2)
ggplot(plot_df, aes(x = Value, y = Names, fill = ..x..), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Ridge Plot of Samples by Name")
library(ggridges)
install.packages('ggridges')
library(ggridges)
ggplot(plot_df, aes(x = Value, y = Names, fill = ..x..), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Ridge Plot of Samples by Name")
ggplot(plot_df, aes(x = event_goalie_name, y = Names, fill = ..x..), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Ridge Plot of Samples by Name")
ggplot(plot_df, aes(x = Value, y = event_goalie_name, fill = ..x..), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Ridge Plot of Samples by Name")
ggplot(plot_df, aes(x = Value, y = event_goalie_name), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Ridge Plot of Samples by Name")
#sort
goalie_key_df <- goalie_key_df[-order(goalie_key_df$mean), ]
#merge back to goalie_df
goalie_key_df <- distinct(goalie_df[,c('event_goalie_id', 'event_goalie_name')])
model_key_df <- distinct(goalie_df_comp[,c('event_goalie_id', 'goalie_id_stan')])
goalie_key_df <- left_join(goalie_key_df, model_key_df, by = 'event_goalie_id')
#remove NA row
goalie_key_df <- goalie_key_df[complete.cases(goalie_key_df), ]
#sort
goalie_key_df <- goalie_key_df[order(-goalie_key_df$mean), ]
?order
#sort
goalie_key_df <- goalie_key_df[order(goalie_key_df$mean, decreasing = T), ]
#sort
goalie_key_df <- goalie_key_df %>% arrange(desc(mean))
#sort
goalie_key_df <- goalie_key_df %>% arrange(desc(goalie_key_df$mean))
View(goalie_key_df)
View(goalie_key_df)
#merge back to goalie_df
goalie_key_df <- distinct(goalie_df[,c('event_goalie_id', 'event_goalie_name')])
model_key_df <- distinct(goalie_df_comp[,c('event_goalie_id', 'goalie_id_stan')])
goalie_key_df <- left_join(goalie_key_df, model_key_df, by = 'event_goalie_id')
#merge in results
goalie_key_df <- left_join(goalie_key_df, fit_sum, by = 'goalie_id_stan')
#remove NA row
goalie_key_df <- goalie_key_df[complete.cases(goalie_key_df), ]
#sort
goalie_key_df <- goalie_key_df %>% arrange(desc(goalie_key_df$mean))
View(goalie_key_df)
#get alpha samples
alpha_samps <- as.data.frame(t(extract(fit, pars = 'alpha')$alpha))
alpha_samps$goalie_id_stan <- seq(1, nrow(alpha_samps))
#get top 25 and their ids to extract proper samples
top_25 <- goalie_key_df[1:25, c('event_goalie_name', 'goalie_id_stan')]
#get alpha samples
alpha_samps <- as.data.frame(t(extract(fit, pars = 'alpha')$alpha))
alpha_samps$goalie_id_stan <- seq(1, nrow(alpha_samps))
#get top 25 and their ids to extract proper samples
top_25_id <- goalie_key_df[1:25, c('event_goalie_name', 'goalie_id_stan')]
#get alpha samples
alpha_samps <- as.data.frame(t(extract(fit, pars = 'alpha')$alpha))
alpha_samps$goalie_id_stan <- seq(1, nrow(alpha_samps))
#merge alpha samps back to key with names
top_25_samps <- left_join(top_25_id, alpha_samps, by = 'goalie_id_stan')
plot_df <- alpha_samps %>%
pivot_longer(cols = starts_with("V"), names_to = "Sample", values_to = "Value")
ggplot(plot_df, aes(x = Value, y = event_goalie_name), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Latent Goalie Ability (IRT)")
View(plot_df)
#get top 25 and their ids to extract proper samples
top_25_id <- goalie_key_df[1:25, c('event_goalie_name', 'goalie_id_stan')]
#merge alpha samps back to key with names
top_25_samps <- left_join(top_25_id, alpha_samps, by = 'goalie_id_stan')
plot_df <- alpha_samps %>%
pivot_longer(cols = starts_with("V"), names_to = "Sample", values_to = "Value")
plot_df <- top_25_samps %>%
pivot_longer(cols = starts_with("V"), names_to = "Sample", values_to = "Value")
View(plot_df)
ggplot(plot_df, aes(x = Value, y = event_goalie_name), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Latent Goalie Ability (IRT)")
ggplot(plot_df, aes(x = Value, y = event_goalie_name), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Latent Goalie Ability (IRT)", x = "Ability", y = "Goalie")
ggplot(plot_df, aes(x = Value, y = event_goalie_name), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Latent Goalie Ability (IRT)", x = "Ability", y = element_blank())
str(hex_grid)
View(hex_grid)
View(goalie_key_df)
#get top 25 and their ids to extract proper samples
top_25_id <- goalie_key_df[1:25, c('event_goalie_name', 'goalie_id_stan')]
View(top_25_id)
#get top 25 and their ids to extract proper samples
top_25_id <- goalie_key_df[1:25, c('event_goalie_name', 'goalie_id_stan', 'mean')]
#merge alpha samps back to key with names
top_25_samps <- left_join(top_25_id, alpha_samps, by = 'goalie_id_stan')
#reorder by mean
top_25_samps <- top_25_samps %>% arrange(desc(top_25_samps$mean))
View(top_25_samps)
plot_df <- top_25_samps %>%
pivot_longer(cols = starts_with("V"), names_to = "Sample", values_to = "Value")
ggplot(plot_df, aes(x = Value, y = event_goalie_name), alpha = 0.5) +
geom_density_ridges() +
theme_ridges() +
labs(title = "Latent Goalie Ability (IRT)", x = "Ability", y = element_blank())
View(fit_sum)
summary(fit_sum$mean)
ggplot(plot_df, aes(x = Value, y = event_goalie_name), alpha = 0.5) +
geom_density_ridges(quantile_lines=TRUE) +
theme_ridges() +
labs(title = "Latent Goalie Ability (IRT)", x = "Ability", y = element_blank())
ggplot(plot_df, aes(x = Value, y = event_goalie_name), alpha = 0.5) +
geom_density_ridges(quantile_lines=TRUE, quantile_fun=function(price,...)mean(value)) +
theme_ridges() +
labs(title = "Latent Goalie Ability (IRT)", x = "Ability", y = element_blank())
ggplot(plot_df, aes(x = Value, y = event_goalie_name), alpha = 0.5) +
geom_density_ridges(quantile_lines=TRUE, quantile_fun=mean) +
theme_ridges() +
labs(title = "Latent Goalie Ability (IRT)", x = "Ability", y = element_blank())
View(top_25_id)
#turn into ordered factor
top_25_id$event_goalie_name <- factor(top_25_id$event_goalie_name, levels = top_25_id$event_goalie_name)
#get alpha samples
alpha_samps <- as.data.frame(t(extract(fit, pars = 'alpha')$alpha))
alpha_samps$goalie_id_stan <- seq(1, nrow(alpha_samps))
#merge alpha samps back to key with names
top_25_samps <- left_join(top_25_id, alpha_samps, by = 'goalie_id_stan')
#reorder by mean
top_25_samps <- top_25_samps %>% arrange(desc(top_25_samps$mean))
plot_df <- top_25_samps %>%
pivot_longer(cols = starts_with("V"), names_to = "Sample", values_to = "Value")
ggplot(plot_df, aes(x = Value, y = event_goalie_name), alpha = 0.5) +
geom_density_ridges(quantile_lines=TRUE, quantile_fun=mean) +
theme_ridges() +
labs(title = "Latent Goalie Ability (IRT)", x = "Ability", y = element_blank())
