shiny::runApp('Projects/hockey_proj')
install.packages('shinyWidgets')
install.packages('shinyWidgets')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
runApp('Projects/hockey_proj')
read.csv('./data/shooter_embed_full24.csv')[,-1]
setwd("~/Projects/hockey_proj")
read.csv('./data/shooter_embed_full24.csv')[,-1]
readRDS('./data/embeddings_collapsed24.rds')
test <- read.csv('./data/embed_names_clean24.csv')[,2, drop = T]
##FUNCTIONS-------------------------------------------
#functions
#function that changes raw names from api to pretty first, last format
reorder_name <- function(full_name) {
split_name <- strsplit(full_name, "\\.")[[1]]  # Split the string by dot
last_name <- split_name[length(split_name)]  # Get the last element as last name
# Check for cases where there are multiple initials before the last name
if (length(split_name) > 2) {
first_names <- paste(split_name[-length(split_name)], collapse = ".")  # Concatenate first names
reordered_name <- paste(last_name, first_names, sep = ", ")  # Rearrange and concatenate
} else {
reordered_name <- paste(last_name, split_name[1], sep = ", ")  # Rearrange and concatenate
}
return(reordered_name)
}
test <- sapply(test, reorder_name)
write.csv(test, file = './data/embed_names_clean24.csv')
shiny::runApp()
runApp()
runApp()
player_embedding_lookup <- function(embeddings, embeddings_raw,
pname) {
name <- reverse_name(pname) # Reverse to format in dataframe
rel_row <- which(embeddings$name == name) # Find player
rel_embedding <- embeddings_raw[rel_row, ]
if (length(rel_row) == 0) {
# Handle the case where the player is not found in embeddings
return(character(0))
}
# Compute cosine similarity
similarities <- apply(embeddings_raw, 1, function(x) cosine(rel_embedding, as.vector(x)))
embeddings$sims <- similarities # Merge back in similarities
embeddings <- embeddings[order(-embeddings$sims), ]
top_names <- embeddings[2:4, 'name']
top_names <- unname(sapply(top_names, reorder_name))
return(top_names)
}
embeddings_full <- read.csv('./data/shooter_embed_full24.csv')[,-1]
View(embeddings_full)
embeddings_collapsed_raw <- readRDS('./data/embeddings_collapsed24.rds')
player_embedding_lookup(embeddings_full, embeddings_collapsed_raw, 'Aho, Sebastian')
reverse_name <- function(full_name) {
#changes pretty name form back to api form (from last, first to first.last)
split_name <- strsplit(full_name, ", ")[[1]]  # Split the string by comma and space
last_first <- strsplit(split_name[1], "\\.")[[1]]  # Split the last name and first name by dot
# Check for cases where there are multiple initials before the last name
if (length(last_first) > 1) {
last_name <- last_first[1]  # Extract last name
first_names <- paste(last_first[-1], collapse = ".")  # Concatenate first names
restored_name <- paste(first_names, last_name, sep = "..")  # Rearrange and concatenate
} else {
last_name <- last_first[length(last_first)]  # Extract last name
first_name <- split_name[2]  # Get first name
restored_name <- paste(first_name, last_name, sep = ".")  # Rearrange and concatenate
}
return(restored_name)
}
player_embedding_lookup(embeddings_full, embeddings_collapsed_raw, 'Aho, Sebastian')
player_embedding_lookup <- function(embeddings, embeddings_raw,
pname) {
browser()
name <- reverse_name(pname) # Reverse to format in dataframe
rel_row <- which(embeddings$name == name) # Find player
rel_embedding <- embeddings_raw[rel_row, ]
if (length(rel_row) == 0) {
# Handle the case where the player is not found in embeddings
return(character(0))
}
# Compute cosine similarity
similarities <- apply(embeddings_raw, 1, function(x) cosine(rel_embedding, as.vector(x)))
embeddings$sims <- similarities # Merge back in similarities
embeddings <- embeddings[order(-embeddings$sims), ]
top_names <- embeddings[2:4, 'name']
top_names <- unname(sapply(top_names, reorder_name))
return(top_names)
}
player_embedding_lookup(embeddings_full, embeddings_collapsed_raw, 'Aho, Sebastian')
View(embeddings)
##READ IN
embeddings_full <- read.csv('./data/shooter_embed_full24.csv')[,-1]
##COLLAPSE
embeddings_collapsed <- as.numeric(embeddings_full)
View(embeddings_full)
##COLLAPSE
embeddings_collapsed <- data.matrix(embeddings_full[,1:50])
##WRITE OUT
saveRDS(embeddings_collapsed, './data/embeddings_collapsed24.rds')
embeddings_collapsed_raw <- readRDS('./data/embeddings_collapsed24.rds')
embeddings_full <- read.csv('./data/shooter_embed_full24.csv')[,-1]
embeddings_collapsed_raw <- readRDS('./data/embeddings_collapsed24.rds')
player_embedding_lookup(embeddings_full, embeddings_collapsed_raw, 'Aho, Sebastian')
player_embedding_lookup <- function(embeddings, embeddings_raw,
name <- reverse_name(pname) # Reverse to format in dataframe
player_embedding_lookup <- function(embeddings, embeddings_raw,
name <- reverse_name(pname) # Reverse to format in dataframe
runApp()
runApp()
##GET DATA----------------------------------------------------------
all_df <- load_pbp('2023-24') #load 23-24 season
colnames(all_df)
View(all_df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
##FUNCTIONS-------------------------------------------
#functions
#function that changes raw names from api to pretty first, last format
reorder_name <- function(full_name) {
split_name <- strsplit(full_name, "\\.")[[1]]  # Split the string by dot
last_name <- split_name[length(split_name)]  # Get the last element as last name
# Check for cases where there are multiple initials before the last name
if (length(split_name) > 2) {
first_names <- paste(split_name[-length(split_name)], collapse = ".")  # Concatenate first names
reordered_name <- paste(last_name, first_names, sep = ", ")  # Rearrange and concatenate
} else {
reordered_name <- paste(last_name, split_name[1], sep = ", ")  # Rearrange and concatenate
}
return(reordered_name)
}
t <- read.csv()
t <- read.csv('../data/embed_names_clean24.csv')[,-1]
setwd("~/Projects/hockey_proj")
t <- read.csv('../data/embed_names_clean24.csv')[,-1]
t <- read.csv('./data/embed_names_clean24.csv')[,-1]
t <- sapply(t, reorder_name)
write.csv(t, file = './data/embed_names_clean24.csv')
runApp()
##LIBRARY--------------------------------------------
library(shiny)
library(tidyverse)
library(shinydashboard)
library(reactable)
library(hockeyR)
library(sportyR)
library(readr)
library(patchwork)
library(lsa)
library(proxy)
library(shinyWidgets)
##FUNCTIONS-------------------------------------------
#functions
#function that changes raw names from api to pretty first, last format
reorder_name <- function(full_name) {
split_name <- strsplit(full_name, "\\.")[[1]]  # Split the string by dot
last_name <- split_name[length(split_name)]  # Get the last element as last name
# Check for cases where there are multiple initials before the last name
if (length(split_name) > 2) {
first_names <- paste(split_name[-length(split_name)], collapse = ".")  # Concatenate first names
reordered_name <- paste(last_name, first_names, sep = ", ")  # Rearrange and concatenate
} else {
reordered_name <- paste(last_name, split_name[1], sep = ", ")  # Rearrange and concatenate
}
return(reordered_name)
}
reverse_name <- function(full_name) {
#changes pretty name form back to api form (from last, first to first.last)
split_name <- strsplit(full_name, ", ")[[1]]  # Split the string by comma and space
last_first <- strsplit(split_name[1], "\\.")[[1]]  # Split the last name and first name by dot
# Check for cases where there are multiple initials before the last name
if (length(last_first) > 1) {
last_name <- last_first[1]  # Extract last name
first_names <- paste(last_first[-1], collapse = ".")  # Concatenate first names
restored_name <- paste(first_names, last_name, sep = "..")  # Rearrange and concatenate
} else {
last_name <- last_first[length(last_first)]  # Extract last name
first_name <- split_name[2]  # Get first name
restored_name <- paste(first_name, last_name, sep = ".")  # Rearrange and concatenate
}
return(restored_name)
}
get_player_plot <- function(name, assist_df){
#require(ggplot, hockeyR, sportyR, gridExtra)
stopifnot(is.character(name))#safety checks
pname <- reverse_name(name) #change back to API format
#fetch data
df <- assist_df[which(assist_df$event_player_2_name == pname|
assist_df$event_player_3_name == pname), ]
#create primary vs secondary indicator variable
df$p_assist <- ifelse(df$event_player_2_name == pname, 1, 0)
#split data
plot_prim <- df[which(df$p_assist == 1),c('xg', 'x_fixed', 'y_fixed')]
plot_second <- df[which(df$p_assist == 0),c('xg', 'x_fixed', 'y_fixed')]
p1 <-
geom_hockey("nhl", display_range = "attacking_zone") +
geom_hex(data = plot_prim,
aes(x = x_fixed, y = y_fixed, weight = xg),
show.legend = T)+
scale_fill_gradient(low = "blue", high = "red")+
labs(title = 'Primary', fill = 'xG') +
theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = .9),
plot.margin = unit(c(0.25, -1, 0, -1),
"inches"))
p2 <-
geom_hockey("nhl", display_range = "attacking_zone") +
geom_hex(data = plot_second,
aes(x = x_fixed, y = y_fixed, weight = xg),
show.legend = T)+
scale_fill_gradient(low = "blue", high = "red")+
labs(title = 'Secondary', fill = 'xG') +
theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = .9),
plot.margin = unit(c(0.25, -1, 0, -1),
"inches"))
p1 + p2 + plot_annotation(
title = paste(name, "Assist xG Production 22-23"))
#gridExtra::grid.arrange(p1, p2, ncol = 2,
#top = paste(name, "Assist xG Generation 22-23"),
#left = "Primary",
#right = "Secondary")
}
player_embedding_lookup <- function(embeddings, embeddings_raw,
pname) {
name <- reverse_name(pname) # Reverse to format in dataframe
rel_row <- which(embeddings$name == name) # Find player
rel_embedding <- embeddings_raw[rel_row, ]
if (length(rel_row) == 0) {
# Handle the case where the player is not found in embeddings
return(character(0))
}
# Compute cosine similarity
similarities <- apply(embeddings_raw, 1, function(x) cosine(rel_embedding, as.vector(x)))
embeddings$sims <- similarities # Merge back in similarities
embeddings <- embeddings[order(-embeddings$sims), ]
top_names <- embeddings[2:4, 'name']
top_names <- unname(sapply(top_names, reorder_name))
return(top_names)
}
get_shot_heat_and_goals <- function(name, shots_df){
#require(ggplot, hockeyR, sportyR, gridExtra)
stopifnot(is.character(name))#safety checks
pname <- reverse_name(name) #change back to API format
#fetch data
df <- shots_df[which(shots_df$name == pname), ]
shot_heat_xg  <-
geom_hockey("nhl", display_range = "attacking_zone") +
stat_summary_hex(data = df,
aes(x = x_fixed, y = y_fixed, z = xg),
show.legend = T)+
scale_fill_gradient(low = "blue", high = "red")+
labs(fill = 'xG') +
labs(title = 'xG Heatmap')
shot_locations_goals <-
geom_hockey("nhl", display_range = "attacking_zone") +
geom_point(
data = df,
aes(x_fixed, y_fixed),
size = 6,
shape = ifelse(df$event_type == "GOAL", 19, 1)
) +
labs(title = 'Shots and Goals')
shot_heat_xg + shot_locations_goals + plot_annotation(
title = paste(name, "Shot Profile"))
}
read.csv('./data/embed_names_clean24.csv')[,2, drop = T]
player_names_embed <- embed_names_clean24.csv
player_names_embed <- read.csv('./data/embed_names_clean24.csv')[,2, drop = T]
embeddings_full <- read.csv('./data/shooter_embed_full24.csv')[,-1]
embeddings_collapsed_raw <- './data/embeddings_collapsed24.rds'
player_embedding_lookup(pname = 'Aho, Sebastian', embeddings = embeddings_full, embeddings_raw = embeddings_collapsed_raw)
player_embedding_lookup <- function(embeddings, embeddings_raw,
pname) {
browser()
name <- reverse_name(pname) # Reverse to format in dataframe
rel_row <- which(embeddings$name == name) # Find player
rel_embedding <- embeddings_raw[rel_row, ]
if (length(rel_row) == 0) {
# Handle the case where the player is not found in embeddings
return(character(0))
}
# Compute cosine similarity
similarities <- apply(embeddings_raw, 1, function(x) cosine(rel_embedding, as.vector(x)))
embeddings$sims <- similarities # Merge back in similarities
embeddings <- embeddings[order(-embeddings$sims), ]
top_names <- embeddings[2:4, 'name']
top_names <- unname(sapply(top_names, reorder_name))
return(top_names)
}
player_embedding_lookup(pname = 'Aho, Sebastian', embeddings = embeddings_full, embeddings_raw = embeddings_collapsed_raw)
player_embedding_lookup(pname = 'Aho, Sebastian', embeddings = embeddings_full, embeddings_raw = embeddings_collapsed_raw)
embeddings_collapsed_raw <- readRDS('./data/embeddings_collapsed24.rds')
player_embedding_lookup(pname = 'Aho, Sebastian', embeddings = embeddings_full, embeddings_raw = embeddings_collapsed_raw)
View(embeddings_full)
embeddings_collapsed <- embeddings_full[,1:50]
embeddings_collapsed <- as.numeric(embeddings_collapsed)
embeddings_collapsed <- as.matrix(embeddings_collapsed)
saveRDS(embeddings_collapsed, file = './data/embeddings_collapsed24.rds')
embeddings_collapsed_raw <- readRDS('./data/embeddings_collapsed24.rds')
player_embedding_lookup(pname = 'Aho, Sebastian', embeddings = embeddings_full, embeddings_raw = embeddings_collapsed_raw)
runApp()
